!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([function(t,e,n){"use strict";e.__esModule=!0;var r=function(){return function(t,e,n){this.r=t,this.g=e,this.b=n}}();e.default=r},function(t,e,n){"use strict";e.__esModule=!0;var r=n(2),o=n(4);n(5);var i=new r.default(15,3);document.body.appendChild(i.el);var s=new o.default(15,3);window.requestAnimationFrame(function t(e){window.requestAnimationFrame(t),i.update(s),i.render()})},function(t,e,n){"use strict";e.__esModule=!0;var r=n(3),o=n(0),i=(function(){}(),function(){function t(t,e,n,i){void 0===t&&(t=15),void 0===e&&(e=3),void 0===n&&(n=28),void 0===i&&(i=30),this.rowCount=t,this.colCount=e,this.size=n,this.fps=i,this.el=document.createElementNS("http://www.w3.org/2000/svg","svg"),this.el.id="main",this.el.setAttributeNS("http://www.w3.org/2000/xmlns/","xmlns:xlink","http://www.w3.org/1999/xlink"),this.el.setAttribute("height",t*n+"px"),this.el.setAttribute("width",e*n+"px"),this.pixels=[];for(var s=0;s<t;s++){for(var a=[],u=0;u<e;u++){var f=u*n,c=s*n,l=new r.default(f,c,n);this.el.appendChild(l.el),a.push({rect:l,color:new o.default(34,34,34)})}this.pixels.push(a)}this.duration=Math.floor(1e3/i)}return t.prototype.update=function(t){t.update(),this.loop(function(e,n,r){r.color=t.draw(e,n,r.color)})},t.prototype.render=function(){this.loop(function(t,e,n){n.rect.fill(n.color)})},t.prototype.ready=function(t){var e=t-this.lastTime+this.delta;return e>this.duration&&(this.delta=e%Math.floor(this.duration),this.lastTime=t,!0)},t.prototype.loop=function(t){for(var e=this.rowCount,n=this.colCount,r=this.pixels,o=0;o<e;o++)for(var i=0;i<n;i++){t(o,i,r[o][i])}},t}());e.default=i},function(t,e,n){"use strict";e.__esModule=!0;var r=function(){function t(t,e,n){this.x=t,this.y=e,this.size=n,this.el=document.createElementNS("http://www.w3.org/2000/svg","rect"),this.el.setAttributeNS(null,"x",t.toString()),this.el.setAttributeNS(null,"y",e.toString()),this.el.setAttributeNS(null,"height",n.toString()),this.el.setAttributeNS(null,"width",n.toString())}return t.prototype.fill=function(t){this.el.setAttributeNS(null,"style","fill: rgb("+t.r+","+t.g+","+t.b+");")},t}();e.default=r},function(t,e,n){"use strict";e.__esModule=!0;var r=n(0),o=function(){return function(t,e){void 0===t&&(t=!1),void 0===e&&(e=!1),this.active=t,this.fade=e}}(),i=function(){function t(t,e,n,r){void 0===n&&(n=2),void 0===r&&(r=24),this.rowCount=t,this.colCount=e,this.sync=n,this.fade=r,this.fadeIndex=0,this.state=[];for(var i=0;i<t;i++){for(var s=[],a=0;a<e;a++)s.push(new o);this.state.push(s)}}return t.prototype.update=function(){this.fadeIndex>this.fade?(this.fadeIndex=0,this.sync++,this.sync>=this.colCount&&(this.sync=0)):this.fadeIndex++},t.prototype.draw=function(t,e,n){var o=this.state[t][e];if(o.active&&0===this.fadeIndex)o.active=!1,o.fade=!0;else{var i=(s=t%this.colCount+this.sync)>2?s-this.colCount:s;o.active=i===e}if(o.fade){var s=this.fade-this.fadeIndex;return this.fadeIndex===this.fade&&(o.fade=!1),new r.default(34+8*s,34,34+6*s)}return o.active?new r.default(34+8*this.fade,34,34+6*this.fade):new r.default(34,34,34)},t}();e.default=i},function(t,e,n){var r=n(6);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(8)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(7)(!1)).push([t.i,"body {\n  background-color: #222;\n}\n\n.container {\n  margin-top: 40px;\n}\n\n#main {\n\n  display: block;\n  margin: 40px auto 0 auto;\n}\n",""])},function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var o=(s=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(s))))+" */"),i=r.sources.map(function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"});return[n].concat(i).concat([o]).join("\n")}var s;return[n].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+n+"}":n}).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];null!=i&&(r[i]=!0)}for(o=0;o<t.length;o++){var s=t[o];null!=s[0]&&r[s[0]]||(n&&!s[2]?s[2]=n:n&&(s[2]="("+s[2]+") and ("+n+")"),e.push(s))}},e}},function(t,e,n){var r,o,i={},s=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),a=function(t){var e={};return function(t,n){if("function"==typeof t)return t();if(void 0===e[t]){var r=function(t,e){return e?e.querySelector(t):document.querySelector(t)}.call(this,t,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}e[t]=r}return e[t]}}(),u=null,f=0,c=[],l=n(9);function d(t,e){for(var n=0;n<t.length;n++){var r=t[n],o=i[r.id];if(o){o.refs++;for(var s=0;s<o.parts.length;s++)o.parts[s](r.parts[s]);for(;s<r.parts.length;s++)o.parts.push(m(r.parts[s],e))}else{var a=[];for(s=0;s<r.parts.length;s++)a.push(m(r.parts[s],e));i[r.id]={id:r.id,refs:1,parts:a}}}}function p(t,e){for(var n=[],r={},o=0;o<t.length;o++){var i=t[o],s=e.base?i[0]+e.base:i[0],a={css:i[1],media:i[2],sourceMap:i[3]};r[s]?r[s].parts.push(a):n.push(r[s]={id:s,parts:[a]})}return n}function h(t,e){var n=a(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=c[c.length-1];if("top"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),c.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=a(t.insertAt.before,n);n.insertBefore(e,o)}}function v(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=c.indexOf(t);e>=0&&c.splice(e,1)}function b(t){var e=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var r=function(){0;return n.nc}();r&&(t.attrs.nonce=r)}return y(e,t.attrs),h(t,e),e}function y(t,e){Object.keys(e).forEach(function(n){t.setAttribute(n,e[n])})}function m(t,e){var n,r,o,i;if(e.transform&&t.css){if(!(i="function"==typeof e.transform?e.transform(t.css):e.transform.default(t.css)))return function(){};t.css=i}if(e.singleton){var s=f++;n=u||(u=b(e)),r=x.bind(null,n,s,!1),o=x.bind(null,n,s,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",y(e,t.attrs),h(t,e),e}(e),r=function(t,e,n){var r=n.css,o=n.sourceMap,i=void 0===e.convertToAbsoluteUrls&&o;(e.convertToAbsoluteUrls||i)&&(r=l(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var s=new Blob([r],{type:"text/css"}),a=t.href;t.href=URL.createObjectURL(s),a&&URL.revokeObjectURL(a)}.bind(null,n,e),o=function(){v(n),n.href&&URL.revokeObjectURL(n.href)}):(n=b(e),r=function(t,e){var n=e.css,r=e.media;r&&t.setAttribute("media",r);if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){v(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=s()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=p(t,e);return d(n,e),function(t){for(var r=[],o=0;o<n.length;o++){var s=n[o];(a=i[s.id]).refs--,r.push(a)}t&&d(p(t,e),e);for(o=0;o<r.length;o++){var a;if(0===(a=r[o]).refs){for(var u=0;u<a.parts.length;u++)a.parts[u]();delete i[a.id]}}}};var w,g=(w=[],function(t,e){return w[t]=e,w.filter(Boolean).join("\n")});function x(t,e,n,r){var o=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=g(e,o);else{var i=document.createTextNode(o),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(i,s[e]):t.appendChild(i)}}},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,r=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var o,i=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?t:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,